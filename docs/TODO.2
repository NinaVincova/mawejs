NOTES

-------------------------------------------------------------------------------

FIXES:

- File loading & saving needs rework. It should work asynchronously. We need to
  be sure that docs in the software are up-to-date (e.g. file entry has been
  changed after "Save as..." correctly)

- Error management: We need some sort of async. error management e.g. when
  loading and saving files.

- Entire architecture needs rethinking

- Add file name to doc info in editor (helps a lot!)

- Doc reload (revert). Reconsider this... We have plenty of room just to
  keep track of every saved buffers. We might implement a poor man's
  version control with this.

- Title to index (so that we can click it to move to the beginning)

- Need indication that file is changed: keep loaded version available and
  compare to it.

-------------------------------------------------------------------------------

FIRST VIABLE VERSION:

We can make very simple, notepad-like editor as a starting point! We can add
fancier features later. Basically, I first need editor to replace current Python
version - in fact, not even that, as I can use the Python version for tasks that
can not be done with Electron version yet.

VERSIONS/ARCHIVES: The main objective is to make versions working! That is
needed urgently! It won't take long time when I need an editor, where I can
archive the existing version, and use it to create new one.

TODO:

- File loading & saving, support for workspaces

- When directory is opened from search, change directory accordingly (probably the
  best is to use the directory where the search was initiated? Or the directory
  where the opened file is?)

- Organizer/Outliner? An own view to move parts and scenes around stories.

- Cards or something alike. Main feature: card has a tag, that can be scanned
  through text to recognize things.

- Notes section handling.

DONE:

- Content editing: support for standard features. It is doable, if you can:

  - DONE: apply scene header, comments, missing,
  - DONE: maybe have clickable index.
  - DONE: save in readable format,

- DONE: Work toward saving the edited content: Serialize doc from Slate editor

- DONE: Move CWD to application level, so that app remembers in which directory it was

- DONE: Support for parts.

-------------------------------------------------------------------------------

- Make electron-devtools-installer to work

- During scanning, it can be hard to double-click a file. Figure out something.

- DONE: Update to react-scripts v5: Needs huge amount of work. Zlib, path and os
  stop working and needs to be tweaked. Also, elementtree does not work
  with webpack v5, as it uses stream library. Some day, but not today.

-------------------------------------------------------------------------------

PROJECT MANAGEMENT

It would be best to remove project management fields from the story itself.
It would be safer, if fields like status and deadline would be saved in their
own database. That way we could change the field values without touching the
story itself.

- The PM fields would be saved to the file itself once it is loaded and
  saved (that is, when loading, PM fields would override the fields in the
  file)

- Project manager: dirs to scan, scan dirs and extract headers etc.

-------------------------------------------------------------------------------

FILE EXPLORER

For opening and saving-as files, we need some sort of interface to file system.
I decided to write my own "file browser" for this purpose, so that it can
implement handy features for editor.

- Borrow ideas to file browser from Dropbox web browser.


-------------------------------------------------------------------------------

SAVING FILES

I am a bit paranoid about saving files, because if there are bugs in the
saving process, it may lead to great losses. I might need to reinforce
the saving process:

- When buffer is done, try to open it and compare it to the doc that
  was given to be saved. If they differ, don't save.

- I might need to go to some kind of versioning file system just to make
  myself to feel more relaxed...

-------------------------------------------------------------------------------

VERSIONS:

- Modification time needed mainly when saving versions (so that you know
  when that version was modified last time) needs to be thought...

-------------------------------------------------------------------------------

FUTURE:

- Import RTF: https://www.npmjs.com/package/rtf-parser - many writers Use
  Word or similar, and they can make RTFs.

- Import text & RTF files to scenes.

- Can we do / do we need fake app for test bench?

- Command line usage? It would be great if you could run the software without
  window, just from command line. It would give all sorts of great opportunities
  to integrate editor to other systems (e.g. automatic exports and other
  operations). You could basically make some automatic imports, too?

-------------------------------------------------------------------------------

DONE:

